#BlueJ class context
comment0.target=Cell
comment0.text=\n\ A\ cell\ in\ a\ Sokoban\ puzzle.\n\n\ @author\ Dr\ Mark\ C.\ Sinclair\n\ @version\ October\ 2021\n
comment1.params=display\ puzzle\ row\ col
comment1.target=Cell(char,\ Sokoban,\ int,\ int)
comment1.text=\n\ Constructor\n\n\ @param\ display\ the\ character\ to\ use\ for\ display\ purposes\ for\ this\ cell\n\ @param\ puzzle\ the\ parent\ Sokoban\ puzzle\ (cannot\ be\ null)\n\ @param\ row\ this\ cell's\ row\ in\ the\ Sokoban\ puzzle\ (numbered\ from\ 0)\n\ @param\ col\ this\ cell's\ column\ in\ the\ Sokoban\ puzzle\ (numbered\ from\ 0)\n
comment10.params=
comment10.target=boolean\ isEmpty()
comment10.text=\n\ Checks\ if\ this\ cell\ is\ empty\n\n\ @return\ is\ this\ cell\ empty?\n
comment11.params=
comment11.target=boolean\ hasActor()
comment11.text=\n\ Checks\ if\ this\ cell\ is\ occupied\ by\ an\ actor\n\n\ @return\ is\ this\ cell\ occupied\ by\ an\ actor?\n
comment12.params=
comment12.target=boolean\ hasBox()
comment12.text=\n\ Checks\ if\ this\ cell\ is\ occupied\ by\ a\ box\n\n\ @return\ is\ this\ cell\ occupied\ by\ a\ box?\n
comment13.params=
comment13.target=boolean\ hasWall()
comment13.text=\n\ Checks\ if\ this\ cell\ is\ occupied\ by\ a\ wall\n\n\ @return\ is\ this\ cell\ occupied\ by\ a\ wall?\n
comment14.params=dir
comment14.target=Cell\ getCell(Direction)
comment14.text=\n\ Get\ the\ next\ cell\ in\ a\ given\ direction\n\n\ @param\ dir\ the\ direction\ to\ check\n\ @return\ the\ cell\ in\ a\ given\ direction\ (or\ null\ if\ off\ the\ grid)\n
comment15.params=
comment15.target=int\ numAdjacentWalls()
comment15.text=\n\ Count\ the\ number\ of\ adjacent\ cells\ occupied\ by\ walls\n\n\ @return\ the\ number\ of\ adjacent\ walls\n
comment16.params=
comment16.target=boolean\ isWallSafe()
comment16.text=\n\ If\ this\ Cell\ was\ empty,\ would\ it\ be\ safe\ to\ push\ a\ box\ into\ it?\n\ (Do\ the\ walls\ make\ it\ impossible\ to\ push\ it\ out\ of\ this\ cell?)\n\n\ @return\ if\ this\ Cell\ was\ empty,\ would\ it\ be\ safe\ to\ push\ a\ box\ into\ it?\n
comment17.params=dir
comment17.target=boolean\ isStuckSafe(Direction)
comment17.text=\n\ Is\ it\ safe\ (from\ getting\ stuck\ to\ another\ box)\ to\ move\ a\ box\ in\ the\ given\ direction?\n\n\ @param\ dir\ the\ direction\ to\ check\n\ @return\ is\ it\ safe\ (from\ getting\ stuck\ to\ another\ box)\ to\ move\ a\ box\ in\ the\ given\ direction?\n
comment18.params=origin\ dir
comment18.target=boolean\ isMoveableBoxLocation(Cell,\ Direction)
comment18.text=\n\ Could\ a\ box\ at\ this\ location\ move\ perpendicular\ to\ the\ indicated\ direction?\n\ The\ location\ does\ not\ currently\ have\ to\ contain\ a\ box\ (this\ should\ be\ separately\ tested\ if\ required)\n\ Origin\ is\ the\ cell\ where\ the\ original\ box\ will\ move\ from.\n\ (Even\ if\ it\ currently\ contains\ a\ box,\ origin\ is\ treated\ as\ empty)\n\n\ @param\ origin\ where\ the\ original\ box\ will\ move\ from\ (cannot\ be\ null)\n\ @param\ dir\ the\ direction\ to\ check\n\ @return\ if\ a\ box\ at\ this\ location\ could\ move\ perpendicular\ to\ the\ indicated\ direction?\n
comment19.params=origin\ taboo\ dir
comment19.target=boolean\ isMoveableBoxLocation(Cell,\ Cell,\ Direction)
comment19.text=\n\ Could\ a\ box\ at\ this\ location\ move\ perpendicular\ to\ the\ indicated\ direction?\n\ The\ location\ does\ not\ currently\ have\ to\ contain\ a\ box\ (this\ should\ be\ separately\ tested\ if\ required)\n\ Origin\ is\ the\ cell\ where\ the\ original\ box\ will\ move\ from.\n\ (Even\ if\ it\ currently\ contains\ a\ box,\ origin\ is\ treated\ as\ empty)\n\ Assume\ the\ taboo\ cell\ has\ already\ been\ visited\ (cannot\ be\ null)\n\n\ @param\ origin\ where\ the\ original\ box\ will\ move\ from\ (cannot\ be\ null)\n\ @param\ taboo\ a\ cell\ that\ is\ already\ assumed\ to\ have\ been\ visited\n\ @param\ dir\ the\ direction\ to\ check\n\ @return\ if\ a\ box\ at\ this\ location\ could\ move\ perpendicular\ to\ the\ indicated\ direction?\n
comment2.params=other
comment2.target=int\ compareTo(Cell)
comment2.text=\n\ Compares\ the\ cell\ with\ another\ only\ on\ the\ basis\ of\ rows\ and\ columns\n\n\ @param\ other\ the\ other\ cell\n\ @return\ -1\ if\ either\ this\ row\ or\ column\ are\ smaller;\ 1\ if\ either\ this\ row\ or\ column\ are\ larger;\ otherwise\ 0\n
comment20.params=origin\ dir\ visited
comment20.target=boolean\ isMoveableBoxLocation(Cell,\ Direction,\ java.util.TreeSet)
comment20.text=\n\ Could\ a\ box\ at\ this\ location\ move\ perpendicular\ to\ the\ indicated\ direction?\n\ The\ location\ does\ not\ currently\ have\ to\ contain\ a\ box\ (this\ should\ be\ separately\ tested\ if\ required)\n\ Origin\ is\ the\ cell\ where\ the\ original\ box\ will\ move\ from.\n\ (Even\ if\ it\ currently\ contains\ a\ box,\ origin\ is\ treated\ as\ empty)\n\ The\ recursion\ has\ already\ checked\ all\ the\ cells\ in\ visited\n\n\ @param\ origin\ where\ the\ original\ box\ will\ move\ from\ (cannot\ be\ null)\n\ @param\ dir\ the\ direction\ to\ check\n\ @param\ the\ set\ of\ cells\ already\ visited\n\ @return\ if\ a\ box\ at\ this\ location\ could\ move\ perpendicular\ to\ the\ indicated\ direction?\n
comment21.params=dir
comment21.target=boolean\ canMove(Direction)
comment21.text=\n\ Checks\ if\ the\ cell\ occupant\ can\ move\ to\ the\ next\ cell\ in\ a\ given\ direction\n\n\ @param\ dir\ the\ direction\ to\ check\n\ @return\ can\ the\ cell\ occupant\ move\ to\ the\ next\ cell\ in\ a\ given\ direction?\n
comment22.params=dir
comment22.target=void\ move(Direction)
comment22.text=\n\ If\ it\ is\ safe,\ move\ the\ cell\ occupant\ to\ the\ next\ cell\ in\ a\ given\ direction\n\n\ @param\ dir\ the\ direction\ to\ move\n
comment23.params=
comment23.target=boolean\ onTarget()
comment23.text=\n\ Checks\ if\ this\ cell\ is\ occupied\ by\ a\ box\ on\ a\ target\n\n\ @return\ is\ this\ cell\ occupied\ by\ a\ box\ on\ a\ target?\n
comment24.params=
comment24.target=java.lang.String\ toString()
comment24.text=\n\ A\ String\ representation\ of\ the\ Cell\n\n\ @return\ the\ String\ representation\n
comment25.params=
comment25.target=java.lang.String\ toStringFull()
comment25.text=\n\ A\ String\ representation\ of\ the\ Cell\ (useful\ for\ debugging)\n\n\ @return\ the\ String\ representation\n
comment26.params=visited
comment26.target=java.lang.String\ TreeSetToString(java.util.TreeSet)
comment26.text=\n\ A\ String\ representation\ of\ a\ TreeSet\ of\ Cells\ (useful\ for\ debugging)\n\n\ @param\ visited\ a\ TreeSet\ of\ Cells\ (cannot\ be\ null)\n\ @return\ the\ String\ representation\n
comment27.params=s
comment27.target=void\ trace(java.lang.String)
comment27.text=\n\ A\ trace\ method\ for\ debugging\ (active\ when\ traceOn\ is\ true)\n\n\ @param\ s\ the\ string\ to\ output\n
comment3.params=obj
comment3.target=boolean\ equals(java.lang.Object)
comment3.text=\n\ Test\ for\ equality\ with\ another\ cell,\ considering\ row\ and\ column\ only\n\n\ @param\ obj\ the\ other\ cell\n\ @return\ do\ the\ two\ cells\ have\ equal\ row\ and\ columns?\n
comment4.params=
comment4.target=int\ getRow()
comment4.text=\n\ Gets\ the\ cell\ row\n\n\ @return\ the\ cell\ row\n
comment5.params=
comment5.target=int\ getCol()
comment5.text=\n\ Gets\ the\ cell\ column\n\n\ @return\ the\ cell\ column\n
comment6.params=display
comment6.target=void\ setDisplay(char)
comment6.text=\n\ Changes\ the\ display\ for\ this\ cell\n\n\ @param\ display\ the\ character\ to\ use\ for\ display\ purposes\ for\ this\ cell\n
comment7.params=
comment7.target=char\ getDisplay()
comment7.text=\n\ Gets\ the\ cell\ display\ character\n\n\ @return\ the\ character\ to\ use\ for\ display\ purposes\ for\ this\ cell\n
comment8.params=occ
comment8.target=void\ setOccupant(Occupant)
comment8.text=\n\ Changes\ the\ occupant\ for\ this\ cell\ (can\ be\ null)\n\n\ @param\ occ\ the\ occupant\ for\ this\ cell\n
comment9.params=
comment9.target=boolean\ isTarget()
comment9.text=\n\ Checks\ if\ this\ cell\ is\ a\ target\n\n\ @return\ is\ this\ cell\ a\ target?\n
numComments=28
